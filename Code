<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>420 Rainbow Circle Clicker</title>
    <style>
        canvas {
            border: 1px solid black;
        }
    </style>
</head>
<body>
    <canvas id="gameCanvas" width="800" height="600"></canvas>

    <script>
        // Initialize canvas and context
        const canvas = document.getElementById("gameCanvas");
        const ctx = canvas.getContext("2d");

        // Define circle properties
        let circleX = canvas.width / 2;
        let circleY = canvas.height / 2;
        let circleRadius = 50;

        // Define rainbow colors
        const rainbowColors = ["red", "orange", "yellow", "green", "blue", "indigo", "violet"];
        let currentColorIndex = 0;

        // Define speed
        let speedX = 2; // Double the speed
        let speedY = 4; // Double the speed

        // Define score
        let score = 0;

        // Define game state
        let gameState = "playing";

        // Function to draw the rainbow circle
        function drawCircle() {
            // Draw black outline
            ctx.beginPath();
            ctx.arc(circleX, circleY, circleRadius, 0, Math.PI * 2);
            ctx.strokeStyle = "black";
            ctx.lineWidth = 0.9;
            ctx.stroke();
            ctx.closePath();

            // Draw rainbow circle
            ctx.beginPath();
            ctx.arc(circleX, circleY, circleRadius - 0.9 / 2, 0, Math.PI * 2);
            ctx.fillStyle = rainbowColors[currentColorIndex];
            ctx.fill();
            ctx.closePath();
        }

        // Function to update circle position
        function updateCirclePosition() {
            circleX += speedX;
            circleY += speedY;

            // Check if circle hits the edges of the canvas
            if (circleX + circleRadius > canvas.width || circleX - circleRadius < 0) {
                speedX = -speedX; // Reverse horizontal direction
                changeColor(); // Change color when bouncing off edges
            }
            if (circleY + circleRadius > canvas.height || circleY - circleRadius < 0) {
                speedY = -speedY; // Reverse vertical direction
                changeColor(); // Change color when bouncing off edges
            }

            // Check if score reaches 100
            if (score >= 100 && gameState === "playing") {
                gameState = "won";
                setTimeout(function() {
                    gameState = "closing";
                }, 60000); // 60 seconds
            }
        }

        // Function to change circle color
        function changeColor() {
            currentColorIndex = (currentColorIndex + 1) % rainbowColors.length;
        }

        // Function to handle click events
        function handleClick(event) {
            const rect = canvas.getBoundingClientRect();
            const mouseX = event.clientX - rect.left;
            const mouseY = event.clientY - rect.top;

            const distance = Math.sqrt((mouseX - circleX) ** 2 + (mouseY - circleY) ** 2);
            if (distance <= circleRadius) {
                score++;
            } else {
                // Reset score if clicked outside the circle
                score = 0;
            }
        }

        // Function to draw everything
        function draw() {
            // Draw Canadian flag background
            ctx.fillStyle = "#FF0000"; // Red
            ctx.fillRect(0, 0, canvas.width, canvas.height / 2);

            ctx.fillStyle = "#FFFFFF"; // White
            ctx.fillRect(0, canvas.height / 2, canvas.width, canvas.height / 2);

            ctx.fillStyle = "#FF0000"; // Red
            ctx.beginPath();
            ctx.moveTo(0, 0);
            ctx.lineTo(canvas.width, 0);
            ctx.lineTo(canvas.width, 120);
            ctx.lineTo(0, 120);
            ctx.closePath();
            ctx.fill();

            ctx.beginPath();
            ctx.moveTo(0, canvas.height);
            ctx.lineTo(canvas.width, canvas.height);
            ctx.lineTo(canvas.width, 480);
            ctx.lineTo(0, 480);
            ctx.closePath();
            ctx.fill();

            // Clear canvas
            ctx.clearRect(0, 120, canvas.width, 360);

            if (gameState === "playing") {
                // Draw rainbow circle
                drawCircle();
            } else if (gameState === "won") {
                // Draw "YOU WIN" message
                ctx.fillStyle = "black";
                ctx.fillRect(0, 0, canvas.width, canvas.height);

                ctx.font = "40px Arial";
                ctx.textAlign = "center";

                // Rainbow color for text
                ctx.strokeStyle = rainbowColors[currentColorIndex];
                ctx.lineWidth = 2;

                // Rotate colors every second
                setInterval(function() {
                    currentColorIndex = (currentColorIndex + 1) % rainbowColors.length;
                }, 1000);

                ctx.strokeText("YOU WIN", canvas.width / 2, canvas.height / 2);
                ctx.fillText("YOU WIN", canvas.width / 2, canvas.height / 2);
            }

            // Display score
            ctx.font = "20px Arial";
            ctx.fillStyle = "black";
            ctx.fillText("Score: " + score, 10, 30);

            // Check game state
            if (gameState === "closing") {
                setTimeout(function() {
                    window.close();
                }, 1000); // Close the window after 1 second
            } else {
                // Update circle position and draw continuously
                updateCirclePosition();
                requestAnimationFrame(draw);
            }
        }

        // Event listener for clicks
        canvas.addEventListener("click", handleClick);

        // Initial draw
        draw();
    </script>
</body>
</html>
